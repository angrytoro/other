package com.pjxy.common.dao;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.pjxy.common.model.Regist;
import com.pjxy.common.model.RegistExample.Criteria;
import com.pjxy.common.model.RegistExample.Criterion;
import com.pjxy.common.model.RegistExample;
import java.util.List;
import java.util.Map;

public class RegistSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table regist
	 * @mbggenerated
	 */
	public String countByExample(RegistExample example) {
		BEGIN();
		SELECT("count (*)");
		FROM("regist");
		applyWhere(example, false);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table regist
	 * @mbggenerated
	 */
	public String deleteByExample(RegistExample example) {
		BEGIN();
		DELETE_FROM("regist");
		applyWhere(example, false);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table regist
	 * @mbggenerated
	 */
	public String insertSelective(Regist record) {
		BEGIN();
		INSERT_INTO("regist");
		if (record.getMobile() != null) {
			VALUES("MOBILE", "#{mobile,jdbcType=VARCHAR}");
		}
		if (record.getCreateTime() != null) {
			VALUES("CREATE_TIME", "#{createTime,jdbcType=TIMESTAMP}");
		}
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table regist
	 * @mbggenerated
	 */
	public String selectByExample(RegistExample example) {
		BEGIN();
		if (example != null && example.isDistinct()) {
			SELECT_DISTINCT("ID");
		} else {
			SELECT("ID");
		}
		SELECT("MOBILE");
		SELECT("CREATE_TIME");
		FROM("regist");
		applyWhere(example, false);
		if (example != null && example.getOrderByClause() != null) {
			ORDER_BY(example.getOrderByClause());
		}
		if (example.getLimitStart() >= 0)
			return SQL() + " limit " + example.getLimitStart() + ","
					+ example.getLimitEnd();
		else
			return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table regist
	 * @mbggenerated
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		Regist record = (Regist) parameter.get("record");
		RegistExample example = (RegistExample) parameter.get("example");
		BEGIN();
		UPDATE("regist");
		if (record.getId() != null) {
			SET("ID = #{record.id,jdbcType=INTEGER}");
		}
		if (record.getMobile() != null) {
			SET("MOBILE = #{record.mobile,jdbcType=VARCHAR}");
		}
		if (record.getCreateTime() != null) {
			SET("CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP}");
		}
		applyWhere(example, true);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table regist
	 * @mbggenerated
	 */
	public String updateByExample(Map<String, Object> parameter) {
		BEGIN();
		UPDATE("regist");
		SET("ID = #{record.id,jdbcType=INTEGER}");
		SET("MOBILE = #{record.mobile,jdbcType=VARCHAR}");
		SET("CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP}");
		RegistExample example = (RegistExample) parameter.get("example");
		applyWhere(example, true);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table regist
	 * @mbggenerated
	 */
	public String updateByPrimaryKeySelective(Regist record) {
		BEGIN();
		UPDATE("regist");
		if (record.getMobile() != null) {
			SET("MOBILE = #{mobile,jdbcType=VARCHAR}");
		}
		if (record.getCreateTime() != null) {
			SET("CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}");
		}
		WHERE("ID = #{id,jdbcType=INTEGER}");
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table regist
	 * @mbggenerated
	 */
	protected void applyWhere(RegistExample example,
			boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1,
									criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th,
									criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2,
									criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th,
									criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j,
										k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			WHERE(sb.toString());
		}
	}
}