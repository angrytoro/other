package com.pjxy.common.dao;

import static org.apache.ibatis.jdbc.SqlBuilder.BEGIN;
import static org.apache.ibatis.jdbc.SqlBuilder.DELETE_FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.FROM;
import static org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO;
import static org.apache.ibatis.jdbc.SqlBuilder.ORDER_BY;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT;
import static org.apache.ibatis.jdbc.SqlBuilder.SELECT_DISTINCT;
import static org.apache.ibatis.jdbc.SqlBuilder.SET;
import static org.apache.ibatis.jdbc.SqlBuilder.SQL;
import static org.apache.ibatis.jdbc.SqlBuilder.UPDATE;
import static org.apache.ibatis.jdbc.SqlBuilder.VALUES;
import static org.apache.ibatis.jdbc.SqlBuilder.WHERE;

import com.pjxy.common.model.Post;
import com.pjxy.common.model.PostExample.Criteria;
import com.pjxy.common.model.PostExample.Criterion;
import com.pjxy.common.model.PostExample;
import java.util.List;
import java.util.Map;

public class PostSqlProvider {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	public String countByExample(PostExample example) {
		BEGIN();
		SELECT("count (*)");
		FROM("post");
		applyWhere(example, false);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	public String deleteByExample(PostExample example) {
		BEGIN();
		DELETE_FROM("post");
		applyWhere(example, false);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	public String insertSelective(Post record) {
		BEGIN();
		INSERT_INTO("post");
		if (record.getUserId() != null) {
			VALUES("USER_ID", "#{userId,jdbcType=INTEGER}");
		}
		if (record.getBlockId() != null) {
			VALUES("BLOCK_ID", "#{blockId,jdbcType=INTEGER}");
		}
		if (record.getTitle() != null) {
			VALUES("TITLE", "#{title,jdbcType=VARCHAR}");
		}
		if (record.getViewCount() != null) {
			VALUES("VIEW_COUNT", "#{viewCount,jdbcType=INTEGER}");
		}
		if (record.getGoodCount() != null) {
			VALUES("GOOD_COUNT", "#{goodCount,jdbcType=INTEGER}");
		}
		if (record.getBadCount() != null) {
			VALUES("BAD_COUNT", "#{badCount,jdbcType=INTEGER}");
		}
		if (record.getWell() != null) {
			VALUES("WELL", "#{well,jdbcType=BIT}");
		}
		if (record.getBest() != null) {
			VALUES("BEST", "#{best,jdbcType=BIT}");
		}
		if (record.getEnd() != null) {
			VALUES("`END`", "#{end,jdbcType=BIT}");
		}
		if (record.getLock() != null) {
			VALUES("`LOCK`", "#{lock,jdbcType=BIT}");
		}
		if (record.getMark() != null) {
			VALUES("MARK", "#{mark,jdbcType=INTEGER}");
		}
		if (record.getDeleted() != null) {
			VALUES("DELETED", "#{deleted,jdbcType=BIT}");
		}
		if (record.getTopType() != null) {
			VALUES("TOP_TYPE", "#{topType,jdbcType=SMALLINT}");
		}
		if (record.getCreateTime() != null) {
			VALUES("CREATE_TIME", "#{createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getReplyTime() != null) {
			VALUES("REPLY_TIME", "#{replyTime,jdbcType=TIMESTAMP}");
		}
		if (record.getReplyCount() != null) {
			VALUES("REPLY_COUNT", "#{replyCount,jdbcType=INTEGER}");
		}
		if (record.getReplyHasTop() != null) {
			VALUES("REPLY_HAS_TOP", "#{replyHasTop,jdbcType=INTEGER}");
		}
		if (record.getFavCount() != null) {
			VALUES("FAV_COUNT", "#{favCount,jdbcType=INTEGER}");
		}
		if (record.getAuthorName() != null) {
			VALUES("AUTHOR_NAME", "#{authorName,jdbcType=VARCHAR}");
		}
		if (record.getHasAttachment() != null) {
			VALUES("HAS_ATTACHMENT", "#{hasAttachment,jdbcType=BIT}");
		}
		if (record.getHasVote() != null) {
			VALUES("HAS_VOTE", "#{hasVote,jdbcType=BIT}");
		}
		if (record.getContent() != null) {
			VALUES("CONTENT", "#{content,jdbcType=LONGVARCHAR}");
		}
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	public String selectByExampleWithBLOBs(PostExample example) {
		BEGIN();
		if (example != null && example.isDistinct()) {
			SELECT_DISTINCT("ID");
		} else {
			SELECT("ID");
		}
		SELECT("USER_ID");
		SELECT("BLOCK_ID");
		SELECT("TITLE");
		SELECT("VIEW_COUNT");
		SELECT("GOOD_COUNT");
		SELECT("BAD_COUNT");
		SELECT("WELL");
		SELECT("BEST");
		SELECT("`END`");
		SELECT("`LOCK`");
		SELECT("MARK");
		SELECT("DELETED");
		SELECT("TOP_TYPE");
		SELECT("CREATE_TIME");
		SELECT("REPLY_TIME");
		SELECT("REPLY_COUNT");
		SELECT("REPLY_HAS_TOP");
		SELECT("FAV_COUNT");
		SELECT("AUTHOR_NAME");
		SELECT("HAS_ATTACHMENT");
		SELECT("HAS_VOTE");
		SELECT("CONTENT");
		FROM("post");
		applyWhere(example, false);
		if (example != null && example.getOrderByClause() != null) {
			ORDER_BY(example.getOrderByClause());
		}
		if (example.getLimitStart() >= 0)
			return SQL() + " limit " + example.getLimitStart() + ","
					+ example.getLimitEnd();
		else
			return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	public String selectByExample(PostExample example) {
		BEGIN();
		if (example != null && example.isDistinct()) {
			SELECT_DISTINCT("ID");
		} else {
			SELECT("ID");
		}
		SELECT("USER_ID");
		SELECT("BLOCK_ID");
		SELECT("TITLE");
		SELECT("VIEW_COUNT");
		SELECT("GOOD_COUNT");
		SELECT("BAD_COUNT");
		SELECT("WELL");
		SELECT("BEST");
		SELECT("`END`");
		SELECT("`LOCK`");
		SELECT("MARK");
		SELECT("DELETED");
		SELECT("TOP_TYPE");
		SELECT("CREATE_TIME");
		SELECT("REPLY_TIME");
		SELECT("REPLY_COUNT");
		SELECT("REPLY_HAS_TOP");
		SELECT("FAV_COUNT");
		SELECT("AUTHOR_NAME");
		SELECT("HAS_ATTACHMENT");
		SELECT("HAS_VOTE");
		FROM("post");
		applyWhere(example, false);
		if (example != null && example.getOrderByClause() != null) {
			ORDER_BY(example.getOrderByClause());
		}
		if (example.getLimitStart() >= 0)
			return SQL() + " limit " + example.getLimitStart() + ","
					+ example.getLimitEnd();
		else
			return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	public String updateByExampleSelective(Map<String, Object> parameter) {
		Post record = (Post) parameter.get("record");
		PostExample example = (PostExample) parameter.get("example");
		BEGIN();
		UPDATE("post");
		if (record.getId() != null) {
			SET("ID = #{record.id,jdbcType=INTEGER}");
		}
		if (record.getUserId() != null) {
			SET("USER_ID = #{record.userId,jdbcType=INTEGER}");
		}
		if (record.getBlockId() != null) {
			SET("BLOCK_ID = #{record.blockId,jdbcType=INTEGER}");
		}
		if (record.getTitle() != null) {
			SET("TITLE = #{record.title,jdbcType=VARCHAR}");
		}
		if (record.getViewCount() != null) {
			SET("VIEW_COUNT = #{record.viewCount,jdbcType=INTEGER}");
		}
		if (record.getGoodCount() != null) {
			SET("GOOD_COUNT = #{record.goodCount,jdbcType=INTEGER}");
		}
		if (record.getBadCount() != null) {
			SET("BAD_COUNT = #{record.badCount,jdbcType=INTEGER}");
		}
		if (record.getWell() != null) {
			SET("WELL = #{record.well,jdbcType=BIT}");
		}
		if (record.getBest() != null) {
			SET("BEST = #{record.best,jdbcType=BIT}");
		}
		if (record.getEnd() != null) {
			SET("`END` = #{record.end,jdbcType=BIT}");
		}
		if (record.getLock() != null) {
			SET("`LOCK` = #{record.lock,jdbcType=BIT}");
		}
		if (record.getMark() != null) {
			SET("MARK = #{record.mark,jdbcType=INTEGER}");
		}
		if (record.getDeleted() != null) {
			SET("DELETED = #{record.deleted,jdbcType=BIT}");
		}
		if (record.getTopType() != null) {
			SET("TOP_TYPE = #{record.topType,jdbcType=SMALLINT}");
		}
		if (record.getCreateTime() != null) {
			SET("CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getReplyTime() != null) {
			SET("REPLY_TIME = #{record.replyTime,jdbcType=TIMESTAMP}");
		}
		if (record.getReplyCount() != null) {
			SET("REPLY_COUNT = #{record.replyCount,jdbcType=INTEGER}");
		}
		if (record.getReplyHasTop() != null) {
			SET("REPLY_HAS_TOP = #{record.replyHasTop,jdbcType=INTEGER}");
		}
		if (record.getFavCount() != null) {
			SET("FAV_COUNT = #{record.favCount,jdbcType=INTEGER}");
		}
		if (record.getAuthorName() != null) {
			SET("AUTHOR_NAME = #{record.authorName,jdbcType=VARCHAR}");
		}
		if (record.getHasAttachment() != null) {
			SET("HAS_ATTACHMENT = #{record.hasAttachment,jdbcType=BIT}");
		}
		if (record.getHasVote() != null) {
			SET("HAS_VOTE = #{record.hasVote,jdbcType=BIT}");
		}
		if (record.getContent() != null) {
			SET("CONTENT = #{record.content,jdbcType=LONGVARCHAR}");
		}
		applyWhere(example, true);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
		BEGIN();
		UPDATE("post");
		SET("ID = #{record.id,jdbcType=INTEGER}");
		SET("USER_ID = #{record.userId,jdbcType=INTEGER}");
		SET("BLOCK_ID = #{record.blockId,jdbcType=INTEGER}");
		SET("TITLE = #{record.title,jdbcType=VARCHAR}");
		SET("VIEW_COUNT = #{record.viewCount,jdbcType=INTEGER}");
		SET("GOOD_COUNT = #{record.goodCount,jdbcType=INTEGER}");
		SET("BAD_COUNT = #{record.badCount,jdbcType=INTEGER}");
		SET("WELL = #{record.well,jdbcType=BIT}");
		SET("BEST = #{record.best,jdbcType=BIT}");
		SET("`END` = #{record.end,jdbcType=BIT}");
		SET("`LOCK` = #{record.lock,jdbcType=BIT}");
		SET("MARK = #{record.mark,jdbcType=INTEGER}");
		SET("DELETED = #{record.deleted,jdbcType=BIT}");
		SET("TOP_TYPE = #{record.topType,jdbcType=SMALLINT}");
		SET("CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP}");
		SET("REPLY_TIME = #{record.replyTime,jdbcType=TIMESTAMP}");
		SET("REPLY_COUNT = #{record.replyCount,jdbcType=INTEGER}");
		SET("REPLY_HAS_TOP = #{record.replyHasTop,jdbcType=INTEGER}");
		SET("FAV_COUNT = #{record.favCount,jdbcType=INTEGER}");
		SET("AUTHOR_NAME = #{record.authorName,jdbcType=VARCHAR}");
		SET("HAS_ATTACHMENT = #{record.hasAttachment,jdbcType=BIT}");
		SET("HAS_VOTE = #{record.hasVote,jdbcType=BIT}");
		SET("CONTENT = #{record.content,jdbcType=LONGVARCHAR}");
		PostExample example = (PostExample) parameter.get("example");
		applyWhere(example, true);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	public String updateByExample(Map<String, Object> parameter) {
		BEGIN();
		UPDATE("post");
		SET("ID = #{record.id,jdbcType=INTEGER}");
		SET("USER_ID = #{record.userId,jdbcType=INTEGER}");
		SET("BLOCK_ID = #{record.blockId,jdbcType=INTEGER}");
		SET("TITLE = #{record.title,jdbcType=VARCHAR}");
		SET("VIEW_COUNT = #{record.viewCount,jdbcType=INTEGER}");
		SET("GOOD_COUNT = #{record.goodCount,jdbcType=INTEGER}");
		SET("BAD_COUNT = #{record.badCount,jdbcType=INTEGER}");
		SET("WELL = #{record.well,jdbcType=BIT}");
		SET("BEST = #{record.best,jdbcType=BIT}");
		SET("`END` = #{record.end,jdbcType=BIT}");
		SET("`LOCK` = #{record.lock,jdbcType=BIT}");
		SET("MARK = #{record.mark,jdbcType=INTEGER}");
		SET("DELETED = #{record.deleted,jdbcType=BIT}");
		SET("TOP_TYPE = #{record.topType,jdbcType=SMALLINT}");
		SET("CREATE_TIME = #{record.createTime,jdbcType=TIMESTAMP}");
		SET("REPLY_TIME = #{record.replyTime,jdbcType=TIMESTAMP}");
		SET("REPLY_COUNT = #{record.replyCount,jdbcType=INTEGER}");
		SET("REPLY_HAS_TOP = #{record.replyHasTop,jdbcType=INTEGER}");
		SET("FAV_COUNT = #{record.favCount,jdbcType=INTEGER}");
		SET("AUTHOR_NAME = #{record.authorName,jdbcType=VARCHAR}");
		SET("HAS_ATTACHMENT = #{record.hasAttachment,jdbcType=BIT}");
		SET("HAS_VOTE = #{record.hasVote,jdbcType=BIT}");
		PostExample example = (PostExample) parameter.get("example");
		applyWhere(example, true);
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	public String updateByPrimaryKeySelective(Post record) {
		BEGIN();
		UPDATE("post");
		if (record.getUserId() != null) {
			SET("USER_ID = #{userId,jdbcType=INTEGER}");
		}
		if (record.getBlockId() != null) {
			SET("BLOCK_ID = #{blockId,jdbcType=INTEGER}");
		}
		if (record.getTitle() != null) {
			SET("TITLE = #{title,jdbcType=VARCHAR}");
		}
		if (record.getViewCount() != null) {
			SET("VIEW_COUNT = #{viewCount,jdbcType=INTEGER}");
		}
		if (record.getGoodCount() != null) {
			SET("GOOD_COUNT = #{goodCount,jdbcType=INTEGER}");
		}
		if (record.getBadCount() != null) {
			SET("BAD_COUNT = #{badCount,jdbcType=INTEGER}");
		}
		if (record.getWell() != null) {
			SET("WELL = #{well,jdbcType=BIT}");
		}
		if (record.getBest() != null) {
			SET("BEST = #{best,jdbcType=BIT}");
		}
		if (record.getEnd() != null) {
			SET("`END` = #{end,jdbcType=BIT}");
		}
		if (record.getLock() != null) {
			SET("`LOCK` = #{lock,jdbcType=BIT}");
		}
		if (record.getMark() != null) {
			SET("MARK = #{mark,jdbcType=INTEGER}");
		}
		if (record.getDeleted() != null) {
			SET("DELETED = #{deleted,jdbcType=BIT}");
		}
		if (record.getTopType() != null) {
			SET("TOP_TYPE = #{topType,jdbcType=SMALLINT}");
		}
		if (record.getCreateTime() != null) {
			SET("CREATE_TIME = #{createTime,jdbcType=TIMESTAMP}");
		}
		if (record.getReplyTime() != null) {
			SET("REPLY_TIME = #{replyTime,jdbcType=TIMESTAMP}");
		}
		if (record.getReplyCount() != null) {
			SET("REPLY_COUNT = #{replyCount,jdbcType=INTEGER}");
		}
		if (record.getReplyHasTop() != null) {
			SET("REPLY_HAS_TOP = #{replyHasTop,jdbcType=INTEGER}");
		}
		if (record.getFavCount() != null) {
			SET("FAV_COUNT = #{favCount,jdbcType=INTEGER}");
		}
		if (record.getAuthorName() != null) {
			SET("AUTHOR_NAME = #{authorName,jdbcType=VARCHAR}");
		}
		if (record.getHasAttachment() != null) {
			SET("HAS_ATTACHMENT = #{hasAttachment,jdbcType=BIT}");
		}
		if (record.getHasVote() != null) {
			SET("HAS_VOTE = #{hasVote,jdbcType=BIT}");
		}
		if (record.getContent() != null) {
			SET("CONTENT = #{content,jdbcType=LONGVARCHAR}");
		}
		WHERE("ID = #{id,jdbcType=INTEGER}");
		return SQL();
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table post
	 * @mbggenerated
	 */
	protected void applyWhere(PostExample example, boolean includeExamplePhrase) {
		if (example == null) {
			return;
		}
		String parmPhrase1;
		String parmPhrase1_th;
		String parmPhrase2;
		String parmPhrase2_th;
		String parmPhrase3;
		String parmPhrase3_th;
		if (includeExamplePhrase) {
			parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		} else {
			parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
			parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
			parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
			parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
			parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
			parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
		}
		StringBuilder sb = new StringBuilder();
		List<Criteria> oredCriteria = example.getOredCriteria();
		boolean firstCriteria = true;
		for (int i = 0; i < oredCriteria.size(); i++) {
			Criteria criteria = oredCriteria.get(i);
			if (criteria.isValid()) {
				if (firstCriteria) {
					firstCriteria = false;
				} else {
					sb.append(" or ");
				}
				sb.append('(');
				List<Criterion> criterions = criteria.getAllCriteria();
				boolean firstCriterion = true;
				for (int j = 0; j < criterions.size(); j++) {
					Criterion criterion = criterions.get(j);
					if (firstCriterion) {
						firstCriterion = false;
					} else {
						sb.append(" and ");
					}
					if (criterion.isNoValue()) {
						sb.append(criterion.getCondition());
					} else if (criterion.isSingleValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase1,
									criterion.getCondition(), i, j));
						} else {
							sb.append(String.format(parmPhrase1_th,
									criterion.getCondition(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isBetweenValue()) {
						if (criterion.getTypeHandler() == null) {
							sb.append(String.format(parmPhrase2,
									criterion.getCondition(), i, j, i, j));
						} else {
							sb.append(String.format(parmPhrase2_th,
									criterion.getCondition(), i, j,
									criterion.getTypeHandler(), i, j,
									criterion.getTypeHandler()));
						}
					} else if (criterion.isListValue()) {
						sb.append(criterion.getCondition());
						sb.append(" (");
						List<?> listItems = (List<?>) criterion.getValue();
						boolean comma = false;
						for (int k = 0; k < listItems.size(); k++) {
							if (comma) {
								sb.append(", ");
							} else {
								comma = true;
							}
							if (criterion.getTypeHandler() == null) {
								sb.append(String.format(parmPhrase3, i, j, k));
							} else {
								sb.append(String.format(parmPhrase3_th, i, j,
										k, criterion.getTypeHandler()));
							}
						}
						sb.append(')');
					}
				}
				sb.append(')');
			}
		}
		if (sb.length() > 0) {
			WHERE(sb.toString());
		}
	}
}