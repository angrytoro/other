options{  static = false;  // DEBUG_LOOKAHEAD = true;  //DEBUG_PARSER = true;  // DEBUG_TOKEN_MANAGER = true;  JAVA_UNICODE_ESCAPE = true;}PARSER_BEGIN(UbbParser)package com.pjxy.wap.util.ubb;@ SuppressWarnings("all") public class UbbParser{  private UbbTree root = new UbbTree(UbbType.ROOT);}PARSER_END(UbbParser)TOKEN :{  < SIMPLE_TEXT : ~[ ")" ] >| < RIGHT_BRACKET : ")" >}TOKEN :{  < I_BEGIN : "(i/)" >| < I_END : "(/i)" >| < B_BEGIN : "(b/)" >| < B_END : "(/b)" >| < U_BEGIN : "(u/)" >| < U_END : "(/u)" >| < IMG_BEGIN : "(img/)" >| < IMG_END : "(/img)" >| < CALL_BEGIN : "(call/)" >| < CALL_END : "(/call)" >| < URL_BEGIN : "(url=" >| < URL_END : "(/url)" >| < ON_BEGIN : "(on/)" >| < ON_END : "(/on)" >| < BR :    "(br/)"  | "///" >| < TIME : "(time/)" >| < DATE : "(date/)" >| < WEEK : "(week/)" >| < IP : "(ip/)" >}UbbTree Exp() :{}{  (    FlowExp(root) < EOF >  )  {    return root;  }}void DynExp(UbbTree parent) :{  Token t;}{  (    t = < TIME >  | t = < DATE >  | t = < WEEK >  | t = < IP >  )  {    if (t.kind == TIME) parent.addChild(new UbbTree(UbbType.TIME));    if (t.kind == DATE) parent.addChild(new UbbTree(UbbType.DATE));    if (t.kind == WEEK) parent.addChild(new UbbTree(UbbType.WEEK));    if (t.kind == IP) parent.addChild(new UbbTree(UbbType.IP));  }}void OnExp(UbbTree parent) :{  UbbTree tree = null;  String text = "";  Token t;}{  < ON_BEGIN >  {    tree = new UbbTree(UbbType.ON);  }  (    (      t = < SIMPLE_TEXT >    | t = < RIGHT_BRACKET >    )    {      text += t.image;    }  )+  < ON_END >  {    tree.addChild(new UbbTree(UbbType.TEXT, text));  }}void FlowExp(UbbTree parent) :{  String text = "";  Token t;}{  (    {      if (!text.isEmpty())      {        parent.addChild(new UbbTree(UbbType.TEXT, text));        text = "";      }    }    (      LayoutExp(parent)    | ImgExp(parent)    | UrlExp(parent)    | OnExp(parent)    )  | t = < SIMPLE_TEXT >    {      text += t.image;    }  | t = < RIGHT_BRACKET >    {      text += t.image;    }  )+  {    if (!text.isEmpty())    {      parent.addChild(new UbbTree(UbbType.TEXT, text));      text = "";    }  }}void ImgExp(UbbTree parent) :{  String text = "";  Token t;  UbbTree tree = null;}{  < IMG_BEGIN >  (    (      t = < SIMPLE_TEXT >    | t = < RIGHT_BRACKET >    )    {      text += t.image;    }  )+  {    tree = new UbbTree(UbbType.IMG);    tree.addChild(new UbbTree(UbbType.TEXT, text));  }  < IMG_END >  {    parent.addChild(tree);  }}void UrlExp(UbbTree parent) :{  String text = "";  Token t;  UbbTree tree = null;}{  < URL_BEGIN > (t = < SIMPLE_TEXT >  {    text += t.image;  }  )+ < RIGHT_BRACKET >  {    tree = new UbbTree(UbbType.URL, text);    text = "";  }  (    (      t = < SIMPLE_TEXT >    | t = < RIGHT_BRACKET >    )    {      text += t.image;    }  |    {      if (!text.isEmpty())      {        tree.addChild(new UbbTree(UbbType.TEXT, text));        text = "";      }    }    ImgExp(tree)  | DynExp(parent)  | BrExp(parent)  )+  < URL_END >  {    if (!text.isEmpty())    {      tree.addChild(new UbbTree(UbbType.TEXT, text));      text = "";    }    parent.addChild(tree);  }}void CallExp(UbbTree parent) :{  UbbTree tree = null;  String text = "";  Token t;}{  < CALL_BEGIN >  {    tree = new UbbTree(UbbType.CALL);  }  (    (      t = < SIMPLE_TEXT >    | t = < RIGHT_BRACKET >    )    {      text += t.image;    }  )+  < CALL_END >  {    tree.addChild(new UbbTree(UbbType.TEXT, text));  }}void LayoutExp(UbbTree parent) :{}{  IExp(parent)| BExp(parent)| UExp(parent)| BrExp(parent)| DynExp(parent)| CallExp(parent)}void BrExp(UbbTree parent) :{}{  < BR >  {    parent.addChild(new UbbTree(UbbType.BR));  }}void IExp(UbbTree parent) :{  UbbTree tree = null;}{  < I_BEGIN >  {    tree = new UbbTree(UbbType.I);  }  FlowExp(tree) < I_END >  {    parent.addChild(tree);  }}void BExp(UbbTree parent) :{  UbbTree tree = null;}{  < B_BEGIN >  {    tree = new UbbTree(UbbType.B);  }  FlowExp(tree) < B_END >  {    parent.addChild(tree);  }}void UExp(UbbTree parent) :{  UbbTree tree = null;}{  < U_BEGIN >  {    tree = new UbbTree(UbbType.U);  }  FlowExp(tree) < U_END >  {    parent.addChild(tree);  }}